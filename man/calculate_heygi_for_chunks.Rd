% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/heygi_cindex_chunks.R
\name{calculate_heygi_for_chunks}
\alias{calculate_heygi_for_chunks}
\title{Apply Buffer Function and Heygi Index Calculation to Each Chunk of Data}
\usage{
calculate_heygi_for_chunks(
  ttops,
  size = 10000,
  buffer_distance = 10,
  comp_input = "vol_concave",
  maxR = 6,
  num_cores = 1
)
}
\arguments{
\item{ttops}{tree tops sf object}

\item{size}{Numeric. The size of each chunk (number of rows). Default is 10,000.}

\item{buffer_distance}{Numeric. The buffer distance to be applied around each point in the chunk. Default is 10.}

\item{comp_input}{Character. The name of the competition input variable. Default is 'vol_concave'.}

\item{maxR}{Numeric. The maximum radius for the Heygi competition index calculation. Default is 6.}

\item{num_cores}{Numeric. The number of cores to use for parallel processing. Default is 1.}

\item{quiet}{logical; if TRUE, suppresses progress messages}
}
\value{
A dataframe with the Heygi competition index calculated for each chunk, and buffer points identified.
}
\description{
This function chunks the input dataframe, applies the \code{create_buffer} function to each chunk,
then calculates the Heygi competition index for the buffered chunks.
}
\examples{
\dontrun{
lasfile <- system.file("extdata", "Megaplot.laz", package = "lidR")
las <- readLAS(lasfile)
norm_las <- normalize_height(las, tin())
chm <- rasterize_canopy(norm_las, p2r(subcircle = 0.25), res = 1)
ttops <- locate_trees(chm, algorithm = lmf(ws = 1, hmin = 5))

c <- calculate_heygi_for_chunks(ttops, size = 5000, buffer_distance = 5, comp_input = 'Z', maxR = 6, num_cores = 3)

}

}
