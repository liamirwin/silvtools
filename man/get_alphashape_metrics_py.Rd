% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/get_alphashape_metrics_py.R
\name{get_alphashape_metrics_py}
\alias{get_alphashape_metrics_py}
\title{Calculate Crown Metrics for a Set of Tree Points in a LAS Object Using Python}
\usage{
get_alphashape_metrics_py(
  chunk,
  RGB = FALSE,
  np = np,
  scipy_spatial = scipy_spatial,
  QhullError = QhullError
)
}
\arguments{
\item{chunk}{A LAS object or a file path to a LAS file containing tree point cloud data. The data must include tree IDs and (optionally) RGB color channels.}

\item{RGB}{Logical; if \code{TRUE}, the function computes chromatic coordinates (RCC, GCC, BCC) using the provided color channels (R, G, B). Default is \code{FALSE}.}

\item{np}{The \code{numpy} Python package, which must be installed in the Python environment. Default is \code{numpy}.}

\item{scipy_spatial}{The \code{scipy.spatial} Python package, which must be installed in the Python environment. Default is \code{scipy.spatial}.}
}
\value{
A data frame containing crown metrics for each tree, including:
\itemize{
\item \strong{Zmax}: Maximum height of the tree points.
\item \strong{Zq999}: 99.9th percentile of the height values.
\item \strong{Z_mean}: Mean height of the tree points.
\item \strong{n_points}: Number of points in the crown.
\item \strong{vol_convex}: Volume of the convex hull around the points.
\item \strong{CV_Z}: Coefficient of variation of the height (Z) values.
\item \strong{CRR}: Crown ratio, defined as the ratio of the difference between mean and minimum height to the difference between maximum and minimum height.
\item \strong{RCC_mean, GCC_mean, BCC_mean}: Mean relative chromatic coordinates (if \code{RGB = TRUE}).
\item \strong{RCC_median, GCC_median, BCC_median}: Median relative chromatic coordinates (if \code{RGB = TRUE}).
}
}
\description{
This function processes a LAS object or file path, filters out trees with fewer than 4 points, and computes crown attributes for the remaining tree points using Python's \code{scipy.spatial} module for convex hull computation. The function supports RGB-based chromatic metrics if the input data contains color channels.
}
\details{
The function primarily uses the \code{get_crown_attributes_py()} function to compute crown height, size, and complexity metrics for each tree. If the LAS object contains fewer than 4 points for a tree, that tree is discarded from the analysis.

The function performs the following steps:
\itemize{
\item If \code{chunk} is a file path, it reads the LAS file.
\item Filters out trees with fewer than 4 points, as convex hulls cannot be computed with fewer points.
\item Computes crown metrics using \code{get_crown_attributes_py()}, including convex hull volume, crown height, size, complexity metrics, and (optionally) chromatic coordinates if RGB data is available.
}

The Python environment for convex hull computation must be set up as described in the \code{get_crown_attributes_py} function documentation.
}
\note{
Trees with fewer than 4 points are discarded since a 3D convex hull cannot be computed for such cases.
}
\section{Python Environment Setup}{

This function requires Python with \code{numpy} and \code{scipy} installed in a conda environment. Set up a conda environment using the following commands:

\code{conda create -p C:/crown_vol_env python=3.9 numpy scipy}

Then, specify the path to the Python executable:

\code{use_python("G:/calc_convex_volume/crown_vol_conda/python.exe", required = TRUE)}

Ensure that the required Python packages (\code{numpy}, \code{scipy}) are installed in this environment.
}

\examples{
\dontrun{
library(lidR)

# Load and decimate a LAS file
las <- readLAS('G:/Ontario_2023/Block_18/LAS/DLS23/output/tree_las/B18_DLS23_472499.9_5341401_norm_knnidw_treeid.laz')
las_dec <- decimate_points(las, random(5))

# Compute crown metrics using Python (without RGB channels)
tic('Python')
metrics_py <- get_alphashape_metrics_py(las_dec, RGB = FALSE)
toc()

# Compute crown metrics with RGB channels
metrics_py_rgb <- get_alphashape_metrics_py(las_dec, RGB = TRUE)
print(metrics_py_rgb)
}

}
