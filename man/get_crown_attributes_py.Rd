% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/get_crown_attributes_py.R
\name{get_crown_attributes_py}
\alias{get_crown_attributes_py}
\title{Calculate Crown Attributes for a Set of 3D Tree Points Using Python}
\usage{
get_crown_attributes_py(
  X,
  Y,
  Z,
  R = NULL,
  G = NULL,
  B = NULL,
  np,
  scipy_spatial,
  QhullError
)
}
\arguments{
\item{X}{Numeric vector representing the x-coordinates of the tree points.}

\item{Y}{Numeric vector representing the y-coordinates of the tree points.}

\item{Z}{Numeric vector representing the z-coordinates of the tree points.}

\item{R}{Numeric vector (optional) representing the red channel of the tree points.}

\item{G}{Numeric vector (optional) representing the green channel of the tree points.}

\item{B}{Numeric vector (optional) representing the blue channel of the tree points.}
}
\value{
A data frame with the calculated crown attributes. If RGB channels are provided, the data frame will also include chromatic coordinates.

If fewer than 4 points are provided for the convex hull computation, a warning will be issued, and \code{NULL} will be returned.
}
\description{
This function calculates various crown attributes for a set of 3D tree points by leveraging Python's \code{scipy.spatial} module for convex hull computation.
The attributes computed include crown height statistics (e.g., Zmax, Zq999, Z_mean), crown size (number of points, convex hull volume), crown complexity metrics (e.g., coefficient of variation of Z, crown ratio), and chromatic coordinates if color channels are provided.
}
\details{
The convex hull computation is based on the \code{ConvexHull} function from the \code{scipy.spatial} module, which may raise an error if the input points are insufficient to define a 3D shape (fewer than 4 points).

This function computes the following metrics:
\itemize{
\item \strong{Zmax}: Maximum height of the tree points.
\item \strong{Zq999}: 99.9th percentile of the height values.
\item \strong{Zq99}: 99th percentile of the height values.
\item \strong{Z_mean}: Mean height of the tree points.
\item \strong{n_points}: Number of points in the crown.
\item \strong{vol_convex}: Volume of the convex hull around the points.
\item \strong{CV_Z}: Coefficient of variation of the height (Z) values.
\item \strong{CRR}: Crown ratio, defined as the ratio of the difference between mean and minimum height to the difference between maximum and minimum height.
\item \strong{RCC_mean, GCC_mean, BCC_mean}: Mean relative chromatic coordinates if RGB channels are provided.
\item \strong{RCC_median, GCC_median, BCC_median}: Median relative chromatic coordinates if RGB channels are provided.
}
}
\note{
The Python-based convex hull computation can fail if the input points are insufficient to create a valid convex shape. In such cases, a warning is issued, and the function returns \code{NA} for the convex hull volume.
}
\section{Python Environment Setup}{

This function uses Python to compute the convex hull volume. To run this function, ensure that a Python environment is set up with the necessary packages (\code{numpy}, \code{scipy}). You can set up a conda environment with these dependencies by running the following commands:

\code{conda create -p C:/crown_vol_env python=3.9 numpy scipy}

After creating the environment, specify the path to the Python executable:

\code{use_python("G:/calc_convex_volume/crown_vol_conda/python.exe", required = TRUE)}

Ensure that the Python packages \code{numpy} and \code{scipy} are installed in this environment.
}

\examples{
Miniconda path with numpy and scipy G:/calc_convex_volume/crown_vol_conda
conda_path <- "G:/calc_convex_volume/crown_vol_conda/python.exe"
 Specify the path to your Python executable if necessary
use_python(conda_path, required = TRUE)
np <- import("numpy")
scipy_spatial <- import("scipy.spatial")
QhullError <- import("scipy.spatial.qhull", convert = FALSE)$QhullError

}
